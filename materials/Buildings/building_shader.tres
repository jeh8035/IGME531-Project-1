[gd_resource type="Shader" format=3 uid="uid://cjdo7j28irrqc"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D uv_texture : source_color, filter_nearest, repeat_enable;

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_nearest, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_nearest, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

varying vec3 obj_vertex;
varying flat vec3 obj_cam;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);

	// For interior mapping
	obj_vertex = uv1_triplanar_pos;
	obj_cam = inverse(MODELVIEW_MATRIX)[3].xyz;
	obj_cam = (MODEL_MATRIX * vec4(obj_cam, 1.0)).xyz * uv1_scale + uv1_offset;
	obj_cam *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

float random3(vec3 uv) {
    return fract(sin(dot(uv.xyz,
        vec3(12.9898,78.233,41.2512))) * 43758.5453123);
}

float random2(vec2 uv) {
	return fract(sin(dot(uv, vec2(12.9898,78.233))) * 43758.5453123);
}

float random1(float seed) {
	return random2(vec2(seed, seed));
}

float random1_alt(float seed) {
	return random2(vec2(seed, -seed));
}

void fragment() {
	// UV for a window \"square\"
	vec4 uv_tex = triplanar_texture(uv_texture, uv1_power_normal, uv1_triplanar_pos);

	// Random value per window
	vec3 random_seed = vec3(round(uv1_triplanar_pos.x - 0.5), round(uv1_triplanar_pos.y - 0.5), round(uv1_triplanar_pos.z - 0.5));
	float random_window_val = random3(random_seed);

	const vec2 WINDOW_SIZE = vec2(1.0, 1.0);

	// Make emissive windows
	bool is_window =
		// Turn off some windows
		random_window_val > 0.8 &&
		// No windows on top/bottom faces
		(INV_VIEW_MATRIX * vec4(NORMAL.xyz, 0.0)).y < 0.2 &&
		// Window size
		(uv_tex.x > (0.50 - WINDOW_SIZE.x/2.0) &&
			uv_tex.x < (0.5 + WINDOW_SIZE.x/2.0) &&
			uv_tex.y > (0.5 - WINDOW_SIZE.y/2.0) &&
			uv_tex.y < (0.5 + WINDOW_SIZE.y/2.0));
	float window_intensity = random1(random_window_val);
	window_intensity *= (0.5 + sin(TIME * random1_alt(random_window_val))/2.0);
	EMISSION = vec3(float(is_window) * window_intensity);

	// Interior mapping
	const float FLOOR_HEIGHT = 1.0;
	vec3 cam2pix = obj_vertex - obj_cam;
	float ceiling_y;
	float blue;
	if (cam2pix.y > 0.0) {
		ceiling_y = ceil(obj_vertex.y / FLOOR_HEIGHT) * FLOOR_HEIGHT;
		blue = 0.0;
	} else {
		ceiling_y = (ceil(obj_vertex.y / FLOOR_HEIGHT) - 1.0) * FLOOR_HEIGHT;
		blue = 1.0;
	}
	float t = (ceiling_y - obj_cam.y) / cam2pix.y;
	vec2 interior_texcoord = obj_cam.xz + t * cam2pix.xz;
	ALBEDO = vec3(fract(interior_texcoord), blue);

	// Basic material stuff below

	//ALBEDO = albedo.xyz;
	//ALBEDO = vec3(random_seed.x, random_seed.y, 0.0);//albedo.xyz;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
}
"
